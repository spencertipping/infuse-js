Infuse AA-tree | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
A straightforward AA-tree implementation used as a key modification journal by
objects and buffers. Like heapmaps, AA-trees have generators that traverse the
key/value pairs in value-sorted order.

infuse.extend(function (infuse) {
infuse.type('aatree', function (aatree, methods) {

infuse.mixins.pull(methods);

AA-tree state.
We store the ordering function, which takes two values and returns true if the
first should be stored to the left of the second. When searching for elements,
equality is determined with `===`.

Storing AA-trees in an array is _completely and utterly impractical_, so we
define a class representing a tree node.

methods.initialize = function (lt, use_strings, generator, base) {
  this.lt_        = lt ? infuse.fn(lt)
                       : function (a, b) {return a < b};
  this.root_      = null;
  this.map_       = use_strings ? {} : [];
  this.size_      = 0;
  this.version_   = -1;
  this.base_      = base;
  this.generator_ = generator;

  infuse.assert(!!base === !!generator,
    'infuse: base and generator must be specified together ('
  + 'error constructing aatree)');
};

methods.tos = function () {
  return (this.base_ ? '#t<' : '#<')
       + this.map('_2 + ": " + _1').join(', ')
       + '>';
};

methods.size = function () {return this.size_};

Node state.


Derivatives.
Generators traverse the tree in value order, which involves maintaining a
reference to the last value seen.

methods.derivative = function (generator, version_base) {
  var f = infuse.fn(generator);
  return infuse.aatree(this.lt_, !(this.map_ instanceof Array),
                       f, version_base || this);
};

methods.generator = function () {
  // TODO
};
