Infuse edges.
See also the [Infuse edge source](edge-src.md).

Edges preserve invariants between signals. For example, let's suppose you have
two signals, each of which might change independently, and you want to preserve
the invariant that `b.get() = a.get() + 1`.

var a = infuse.signal();
var b = infuse.signal();
var e = a.to(b, '_ + 1', '_ - 1');

var a_called = 0;
a.on(/.*/, function (v, k) {++a_called});
var b_called = 0;
b.on(/.*/, function (v, k) {++b_called});

a.push(5);
b.get()                         -> 6
a_called                        -> 1
b_called                        -> 1

b.push(5);
a.get()                         -> 4
a_called                        -> 2
b_called                        -> 2

Detaching an edge causes it to stop propagating changes:

e.detach()                      -> e
a.push(10);
a_called                        -> 3
b_called                        -> 2
b.get()                         -> 5

b.push(1000);
a_called                        -> 3
b_called                        -> 3
a.get()                         -> 10

We can connect arbitrarily many objects together in any acyclic topology. For
example:

var c = infuse.signal();
var d = infuse.signal();

Let's make the values increase by one between `a`, `b`, `c`, and `d`
respectively.

var ab = a.to(b, '_ + 1', '_ - 1');
var bc = b.to(c, '_ + 1', '_ - 1');
var cd = c.to(d, '_ + 1', '_ - 1');

a.push(2);
d.get()                         -> 5
c.get()                         -> 4
b.get()                         -> 3
d.push(1);
a.get()                         -> -2
b.get()                         -> -1
c.get()                         -> 0

Infuse does not support cyclic graphs. If you create one, it will cause a stack
overflow.

ab.detach();
var ac = a.to(c, '_ + 2', '_ - 2');
a.push(8);
c.get()                         -> 10
b.get()                         -> 9

d.push(9);
a.get()                         -> 6
b.get()                         -> 7
c.get()                         -> 8

Edges generalize to all Infuse objects. If you're connecting synchronous
objects, you'll need to call `pull` on the edge to trigger propagation. Also
note that pre-connection object state is not transferred through the edge; only
updates after the edge is connected will be propagated.

var xs = infuse([]);
var o  = infuse({});
var e  = xs.to(o);

o.push('bar', 'foo');

e.pull();
o.size()                        -> 1
xs.join(',')                    -> 'bar'
xs.size()                       -> 1
xs.keys().join(',')             -> '0'

xs.push('bif');
xs.keys().sort().join(',')      -> '0,1'
xs.size()                       -> 2
e.pull();
o.size()                        -> 2
o.keys().sort().join(',')       -> 'foo,1'
