// Infuse funnels | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Infuse funnels.
// A funnel is a virtual object that unifies multiple bases. It maintains no
// state, and as such has no `get` method.

infuse.extend(function (infuse) {
infuse.type('funnel', function (funnel, methods) {

// Although funnels are structurally pull-collections, we don't mixin the pull
// collection base here. The pull-collection base assumes just one base, but
// funnels have many. Funnels also don't store versions; the funnel's version is
// just the sum of the versions of its bases.

methods.initialize = function (bases) {
  this.bases_ = bases;
};

methods.version = function () {
  for (var v = 0, i = 0, bs = this.bases_, l = bs.length; i < l; ++i)
    v += bs[i].version();
  return v;
};

// Funnels maintain no real state, so pulling does nothing. Changes are always
// propagated from generators.

methods.pull = function () {return this};

// Derivatives.
// Funnels don't support derivatives, but they do provide generators.

methods.derivative = function () {
  throw new Error('infuse: funnels cannot produce derivatives');
};

methods.generator = function () {
  var generators = [],
      versions   = [],
      self       = this;
  for (var i = 0, bs = this.bases_, b, l = bs.length; i < l; ++i)
    generators.push((b = bs[i]).generator()),
    versions.push(-1);
  return function (emit, id) {
    var v  = 0,
        bs = self.bases_;
    if (bs)
      for (var i = 0, l = versions.length; i < l; ++i)
        if ((v = bs[i].version()) > versions[i])
          versions[i] = v,
          generators[i](emit, id);
  };
};

methods.detach = function () {
  for (var i = 0, bs = this.bases_, l = bs.length; i < l; ++i)
    bs[i].detach_derivative(this);
  this.bases_ = null;
  return this;
};

methods.detach_derivative = function (derivative) {
  return this;
};

});
});

// Generated by SDoc
