// Infuse function promotion.
// See also the [Infuse fn source](fn-src.md).

// Infuse promotes functions using a multimethod called `infuse.fn`. This method
// maintains a bounded LRU cache of anything it compiles to minimize the
// performance impact of using functions inside loops. Here are some function
// promotions:

infuse.assert_equal((infuse.fn('_ + 1')(5)                   ), (6));
infuse.assert_equal((infuse.fn('_1 + _2')(5, 6)              ), (11));

// You can also create closure variables for compiled functions:

infuse.assert_equal((infuse.fn('x + _', {x: 5})(6)           ), (11));
infuse.assert_equal((infuse.fn('x + _', {x: 'foo'})('bar')   ), ('foobar'));

// In addition to strings, Infuse gives you some other options like regular
// expressions. You can also add your own types by appending elements to
// `infuse.fn.alternatives`.

infuse.assert_equal((infuse.fn(/f(..)/)('foo')[0]            ), ('oo'));
infuse.assert_equal((infuse.fn(/f(..)/)('bar')               ), (null));
infuse.assert_equal((infuse.fn(/f(.)(.)/)('foo').length      ), (2));
infuse.assert_equal((infuse.fn(/f(.)(.)/)('foo')[0]          ), ('o'));
infuse.assert_equal((infuse.fn(/f(.)(.)/)('foo')[1]          ), ('o'));
infuse.assert_equal((infuse.fn(/foo*/)('fooooo')             ), ('fooooo'));
infuse.assert_equal((infuse.fn(/foo*/)('baaaar')             ), (null));

// And naturally, functions go straight through without any modification.

var f = function (x) {return x + 1};
infuse.assert_equal((infuse.fn(f)(5)                         ), (6));

// The cool part.
// All Infuse objects compile into structure-preserving functions. For example:

var o      = infuse({foo: '_ + 1', bar: ['_', '_ + 2']});
var f      = infuse.fn(o);
var val    = infuse([1, 2]);
var mapped = val.map(f);

infuse.assert_equal((mapped.size()                           ), (2));
infuse.assert_equal((mapped.get(0).get('foo')                ), (2));
infuse.assert_equal((mapped.get(0).get('bar').get(0)         ), (1));
infuse.assert_equal((mapped.get(0).get('bar').get(1)         ), (3));
infuse.assert_equal((mapped.get(1).get('foo')                ), (3));
infuse.assert_equal((mapped.get(1).get('bar').get(0)         ), (2));
infuse.assert_equal((mapped.get(1).get('bar').get(1)         ), (4));

// At this point `mapped` is a *derivative of the function*:

o.push('"bif" + _', 'bif');
infuse.assert_equal((mapped.get(0).get('bif')                ), ('bif1'));
infuse.assert_equal((mapped.get(1).get('bif')                ), ('bif2'));

// It is also still a derivative of `val`:

val.push(3);
infuse.assert_equal((mapped.get(2).get('foo')                ), (4));
infuse.assert_equal((mapped.get(2).get('bar').get(0)         ), (3));
infuse.assert_equal((mapped.get(2).get('bar').get(1)         ), (5));
infuse.assert_equal((mapped.get(2).get('bif')                ), ('bif3'));

// Generated by SDoc
