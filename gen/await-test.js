// Awaiting asynchronous things.
// Infuse provides some global functions that help you work with futures. Two
// useful ones are `await` and `progress`:

var f1 = infuse.future();
var f2 = infuse.future();
var f = infuse.await([f1, f2]);

infuse.assert_equal((f.get()                                 ), (null));

var f_called = false;
f.on(null, function (result) {
  f_called = true;
infuse.assert_equal((  result.join(',')                      ), ('3,5'));
});

f2.push(5);
infuse.assert_equal((f_called                                ), (false));
infuse.assert_equal((f.get()                                 ), (null));

f1.push(3);
infuse.assert_equal((f_called                                ), (true));
infuse.assert_equal((f.get().join(',')                       ), ('3,5'));

// Awaiting is appropriate when you want to block on all futures (or signals), but
// sometimes you want updates as they are resolved. In that case use `progress`:

var sig1 = infuse.signal();
var sig2 = infuse.signal();
var both = infuse.progress(infuse({foo: sig1, bar: sig2}));

infuse.assert_equal((both.get()                              ), (null));
sig1.push(5);
infuse.assert_equal((both.get().keys().sort().join(',')      ), ('foo'));
infuse.assert_equal((both.get().get('foo')                   ), (5));
sig1.push(6);
infuse.assert_equal((both.get().keys().sort().join(',')      ), ('foo'));
infuse.assert_equal((both.get().get('foo')                   ), (6));
sig2.push(3);
infuse.assert_equal((both.get().keys().sort().join(',')      ), ('bar,foo'));
infuse.assert_equal((both.get().get('foo')                   ), (6));
infuse.assert_equal((both.get().get('bar')                   ), (3));

// Generated by SDoc
