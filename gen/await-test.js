// Awaiting asynchronous things.
// Infuse provides some global functions that help you work with futures. Two
// useful ones are `await` and `progress`:

var f1 = infuse.future();
var f2 = infuse.future();
var f = infuse.await([f1, f2]);

infuse.assert_equal((f.get()                                 ), (null));
infuse.assert_equal((f.toString()                            ), ('#future()'));

var f_called = false;
f.on(null, function (result) {
  f_called = true;
infuse.assert_equal((  result.toString()                     ), ('I[3, 5]'));
});

f2.push(5);
infuse.assert_equal((f_called                                ), (false));
infuse.assert_equal((f.get()                                 ), (null));

f1.push(3);
infuse.assert_equal((f_called                                ), (true));
infuse.assert_equal((f.get().tos()                           ), ('I[3, 5]'));
infuse.assert_equal((f.tos()                                 ), ('future(I[3, 5])'));

// Notice that `await` preserves the order of the original futures, regardless of
// the order in which they are delivered.

// Awaiting is appropriate when you want to block on all futures (or signals), but
// sometimes you want updates as they are resolved. In that case use `progress`:

var sig1 = infuse.signal();
var sig2 = infuse.signal();
var both = infuse.progress(infuse({foo: sig1, bar: sig2}));

infuse.assert_equal((both.tos()                              ), ('signal(I{})'));
sig1.push(5);
infuse.assert_equal((both.tos()                              ), ('signal(I{foo: 5})'));
sig1.push(6);
infuse.assert_equal((both.tos()                              ), ('signal(I{foo: 6})'));
sig2.push(3);
infuse.assert_equal((both.tos()                              ), ('signal(I{bar: 3, foo: 6})'));

// Warning: **`progress` will not do the right thing with arrays**! Infuse arrays
// are dense and append-only, which means that there isn't a way to update
// existing elements. As a result, progressing signals into an array will result
// in an array that grows with elements in the order that the signals emitted
// them. For example:

var sig1 = infuse.signal();
var sig2 = infuse.signal();
var all  = infuse.progress([sig1, sig2]);

infuse.assert_equal((all.tos()                               ), ('signal(I[])'));
sig2.push(4);
infuse.assert_equal((all.tos()                               ), ('signal(I[4])'));
sig2.push(5);
infuse.assert_equal((all.tos()                               ), ('signal(I[4, 5])'));
sig1.push(10);
infuse.assert_equal((all.tos()                               ), ('signal(I[4, 5, 10])'));

// You should use objects if you need keys to be significant.
// Generated by SDoc
