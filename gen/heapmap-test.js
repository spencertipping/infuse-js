// Heap map objects.
// See also the [Infuse heapmap source](heapmap-src.md).

// Heap maps give you a way to implement priority queues and similar data
// structures. They are full Infuse objects, which means you can create
// lazily-updated derivatives and they support all of the usual methods (e.g.
// `map`, etc). However, a heap map derivative doesn't behave the same way that
// most derivatives do. See the [heapmap source](heapmap-src.md) for details about
// why it works this way.

var h = $i.heapmap();           // uses minheap of numbers by default
infuse.assert_equal((h.push(0, 'foo')               ), (h));
infuse.assert_equal((h.push(1, 'bar')               ), (h));
infuse.assert_equal((h.size()                       ), (2));
infuse.assert_equal((h.peek()                       ), ('foo'));
infuse.assert_equal((h.get('foo')                   ), (0));
infuse.assert_equal((h.push(2, 'bif')               ), (h));
infuse.assert_equal((h.push(-1, 'baz')              ), (h));
infuse.assert_equal((h.size()                       ), (4));

// At this point `baz` is at the top of the heap, but we can change its heap index
// to rearrange stuff.

infuse.assert_equal((h.peek()                       ), ('baz'));
infuse.assert_equal((h.get('baz')                   ), (-1));
infuse.assert_equal((h.push(3, 'baz')               ), (h));
infuse.assert_equal((h.size()                       ), (4));
infuse.assert_equal((h.pop()                        ), ('foo'));
infuse.assert_equal((h.pop()                        ), ('bar'));
infuse.assert_equal((h.pop()                        ), ('bif'));
infuse.assert_equal((h.pop()                        ), ('baz'));
infuse.assert_equal((h.size()                       ), (0));

// Generated by SDoc
